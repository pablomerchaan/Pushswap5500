#include "pushswap.h"

int *RRaux(int *list, int length, struct rots rot, int partition)
{
    struct change rotation;
    int c;

  rotation.type = 7;
  rotation.idx = partition;
  c = 0;
  while (c < rot.cost - rot.stepsA)
  {
    transform(list, rotation, length);
    c++;
  }
  rotation.type = 5;
  rotation.idx = partition;
  c = 0;
  while (c < rot.stepsA)
  {
    transform(list, rotation, length);
    c++;
  }
  return (list);
}

int *transformrotRR(int *list, int length, struct rots rot, int partition)
{
    struct change rotation;
    int c;

    if (rot.stepsA == 0)
    {
      rotation.type = 7;
      rotation.idx = partition;
      c = 0;
      while (c < rot.cost - rot.stepsB)
      {
        transform(list, rotation, length);
        c++;
      }
      rotation.type = 6;
      rotation.idx = partition;
      c = 0;
      while (c < rot.stepsB)
      {
        transform(list, rotation, length);
        c++;
      }
    }
    else
      RRaux(list, length, rot, partition);
    return (list);
}

int *RRRaux(int *list, int length, struct rots rot, int partition)
{
    struct change rotation;
    int c;

  rotation.type = 7;
  rotation.idx = partition;
  c = 0;
  while (c < rot.cost - rot.stepsA)
  {
    transform(list, rotation, length);
    c++;
  }
  rotation.type = 5;
  rotation.idx = partition;
  c = 0;
  while (c < rot.stepsA)
  {
    transform(list, rotation, length);
    c++;
  }
}

int *transformrotRRR(int *list, int length, struct rots rot, int partition)
{
    struct change rotation;
    int c;
    
    if (rot.stepsA == 0)
    {
      rotation.type = 10;
      rotation.idx = partition;
      c = 0;
      while (c < rot.cost - rot.stepsB)
      {
        transform(list, rotation, length);
        c++;
      }
      rotation.type = 9;
      rotation.idx = partition;
      c = 0;
      while (c < rot.stepsB)
      {
        transform(list, rotation, length);
        c++;
      }
    }
    else
      RRRaux(list, length, rot, partition);
}

int *transformrotRARRB(int *list, int length, struct rots rot, int partition)
{
	struct change rotation;

    rotation.type = 5;
    rotation.idx = partition;
    c = 0;
    while (c < rot.stepsA)
    {
      transform(list, rotation, length);
      c++;
    }
    rotation.type = 9;
    rotation.idx = partition;
    c = 0;
    while (c < rot.stepsB)
    {
      transform(list, rotation, length);
      c++;
    }	
}
int *transformrot(int *list, int length, struct rots rot, int partition)
{
  int c;
  struct change rotation;

  if (rot.type == 0)
    transformrotRR(list, length, rot, partition);
  if (rot.type == 1)
    transformrotRRR(list, length, rot, partition);
  if (rot.type == 2)
  	transformrotRARRB(list, length, rot, partition);
  if (rot.type == 3)
  {
    rotation.type = 8;
    rotation.idx = partition;
    c = 0;
    while (c < rot.stepsA)
    {
      transform(list, rotation, length);
      c++;
    }
    rotation.type = 6;
    rotation.idx = partition;
    c = 0;
    while (c < rot.stepsB)
    {
      transform(list, rotation, length);
      c++;
    }
  }
  return(list);
}
